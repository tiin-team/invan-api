
module.exports = (instance, options, next) => {

  // get supplier by id

  instance.get('/inventory/get_supplier/:id', options.version, (request, reply) => {
    instance.oauth_admin(request, reply, async (admin) => {
      try {
        let supp = await instance.adjustmentSupplier.findOne({
          _id: request.params.id
        })
        if (!supp) {
          return reply.fourorfour('Supplier')
        }
        try {
          supp = supp.toObject()
        }
        catch (error) {
          instance.send_Error('to Object', error.message)
        }
        const transactions = await instance.supplierTransaction.find({ supplier_id: supp._id })
        let data = transactions
        const purChase = await instance.inventoryPurchase.find({ supplier_id: supp._id })
        for (const [index,item] of purChase.entries()) {
          if (data.find(x => x.document_id == item.p_order)) {
            data.pu
          }
        }
        supp.transactions = data;
 //       supp.transactions = transactions;
        // Calculate supplier balance
        const $match = {
          $match: {
            supplier_id: supp._id
          }
        }
        const $group = {
          $group: {
            _id: null,
            balance: {
              $sum: '$balance'
            }
          }
        }
        const result = await instance.supplierTransaction.aggregate([$match, $group]);
        const balance = result.length ? result[0].balance : 0;
        reply.ok({
          ...supp,
          balance,
          saved_balance: 0
        })
      }
      catch (error) {
        return reply.fourorfour('Supplier')
      }
    })
  })

  // get suppliers

  var get_suppliers = (request, reply, admin) => {
    var page = parseInt(request.params.page)
    var limit = parseInt(request.params.limit)
    if (request.body == undefined) {
      request.body = {}
    }
    var supplier_name = request.body.supplier_name
    if (typeof supplier_name != typeof 'invan') {
      supplier_name = ''
    }

    instance.adjustmentSupplier.find({
      is_deleted: {
        $ne: true
      },
      organization: admin.organization,
      $or: [
        {
          supplier_name: {
            $regex: supplier_name,
            $options: 'i'
          }
        },
        {
          supplier_name: {
            $regex: instance.converter(supplier_name),
            $options: 'i'
          }
        }
      ]
    }, (err, suppliers) => {
      if (err || suppliers == null) {
        suppliers = []
      }
      if (page) {
        var total = suppliers.length
        suppliers = suppliers.splice(limit * (page - 1), limit)
        reply.ok({
          total: total,
          page: Math.ceil(total / limit),
          data: suppliers
        })
      }
      else {
        reply.ok(suppliers)
      }
    })
  }

  instance.post('/inventory/get_suppliers/:limit/:page', options.version, (request, reply) => {
    instance.oauth_admin(request, reply, (admin) => {
      if (admin) { get_suppliers(request, reply, admin) }
    })
  })

  instance.get('/inventory/get_suppliers', options.version, (request, reply) => {
    instance.oauth_admin(request, reply, (admin) => {
      if (admin) { get_suppliers(request, reply, admin) }
    })
  })

  function make_unique_suppliers(request, reply, admin, next) {
    instance.adjustmentSupplier.find({
      organization: admin.organization,
      supplier_name: request.body.supplier_name
    }, (_, suppliers) => {
      if (suppliers == null) {
        suppliers = []
      }
      if (suppliers.length > 0) {
        if (request.params) {
          if (request.params.id) {
            if (request.params.id == suppliers[0]._id) {
              next(request, reply, admin)
            }
            else {
              instance.allready_exist(reply)
            }
          }
          else {
            instance.allready_exist(reply)
          }
        }
        else {
          instance.allready_exist(reply)
        }
      }
      else {
        next(request, reply, admin)
      }
    })
  }

  // create supplier 

  var create_supplier = (request, reply, admin) => {
    if (request.body.supplier_name === undefined || request.body.supplier_name === '' || request.body.phone_number === undefined || request.body.phone_number === undefined) {
      reply.error('Error on creating supplier phone_number and name required')
    }
    else {
      delete request.body._id
      var supplier_model = instance.adjustmentSupplier(Object.assign({
        organization: admin.organization,
      }, request.body))
      supplier_model.save((err, supp) => {
        if (err) {
          reply.error('Error on saving supplier')
          instance.send_Error('creating supplier', JSON.stringify(err))
        }
        else {
          reply.ok(supp)
        }
      })
    }
  }

  instance.post('/inventory/create_supplier', options.version, (request, reply) => {
    if (request.body && request.body.balance) {
      delete request.body.balance
    }
    instance.oauth_admin(request, reply, (admin) => {
      if (admin) {
        make_unique_suppliers(request, reply, admin, create_supplier)
      }
    })
  })

  // update supplier

  var update_supplier = (request, reply, admin) => {
    instance.adjustmentSupplier.updateOne({ _id: request.params.id }, { $set: request.body }, (err, result) => {
      if (result.ok) {
        reply.ok()
      }
      else {
        reply.error('Error on updating')
        if (err) { instance.send_Error('update supplier', JSON.stringify(err)) }
      }
    })
  }

  instance.post('/inventory/update_supplier/:id', options.version, (request, reply) => {
    if (request.body) {
      delete request.body.balance
    }
    instance.oauth_admin(request, reply, (admin) => {
      if (!admin) {
        return reply.error('Access')
      }
      make_unique_suppliers(request, reply, admin, update_supplier)
    })
  })

  // delete supplier

  var delete_supplier = (request, reply, admin) => {
    instance.adjustmentSupplier.deleteOne({ _id: request.params.id }, (err, _) => {
      if (err) {
        instance.send_Error('delete supp', JSON.stringify(err))
      }
      else {
        reply.ok()
      }
    })
  }

  instance.delete('/inventory/delete_supplier/:id', options.version, (request, reply) => {
    instance.oauth_admin(request, reply, (admin) => {
      if (admin) {
        delete_supplier(request, reply, admin)
      }
    })
  })

  // delete group

  var delete_suppliers = (request, reply, admin) => {
    instance.adjustmentSupplier.deleteMany({
      _id: {
        $in: request.body.indexes
      }
    }, (err, _) => {
      if (err) {
        reply.error('Error on deleting')
        instance.send_Error('deleting suppliers', JSON.stringify(err))
      }
      else {
        reply.ok()
      }
    })
  }

  instance.post('/inventory/delete_suppliers', options.version, (request, reply) => {
    instance.oauth_admin(request, reply, (admin) => {
      if (admin) {
        delete_suppliers(request, reply, admin)
      }
    })
  })

  // create supplier transaction

  const createTransactionHandler = async (request, reply) => {

    try {
      const supplier_id = request.body.supplier_id
      const body = request.body
      const user = request.user
      const supplier = await instance.adjustmentSupplier.findOne({ _id: supplier_id })
      if (!supplier) {
        return reply.fourorfour('Supplier')
      }

      if (request.body.return_money) {
        body.balance *= (-1)
      }
      const supplierTransaction = {
        ...body,
        supplier_id: supplier._id,
        employee: user._id,
        employee_name: user.name,
        date: new Date().getTime()
      }
      const { _id: id } = await new instance.supplierTransaction(supplierTransaction).save()
      if (!id) {
        return reply.error('Could not save')
      }
      if (!supplier.balance) {
        supplier.balance = 0;
      }
      if (!supplier.balance_usd) {
        supplier.balance_usd = 0;
      }

      if (body.currency == 'usd') {
        supplier.balance_usd += body.balance;
        // try {
        //   let currency = await instance.Currency.findOne({ organization: user.organization })
        //   if (!currency) {
        //     currency = { value: 1 }
        //   }

        //   body.balance = body.balance * currency.value
        // } catch (error) { }
      }
      else {
        supplier.balance += body.balance;
      }
      await instance.adjustmentSupplier.updateOne({
        _id: supplier._id
      }, {
        $set: {
          balance: supplier.balance,
          balance_usd: supplier.balance_usd
        }
      })

      if (body.status == 'active') {
        const { _id: consumption_id } = await new instance.consumptionModel({
          transaction_id: id,
          date: supplierTransaction.date,
          supplier: supplierTransaction.supplier_id,
          organization: user.organization,
          by: user._id,
          by_name: user.name,
          type: 'company_to_fees',
          supplier_name: supplier.supplier_name,
          amount_type: supplierTransaction.balance_type,
          amount: body.balance,
          currency_amount: supplierTransaction.balance,
          currency: body.currency
        }).save()

        /** Remove from Safe */
        const safe_data = {
          organization: user.organization,
          type: body.currency,
          value: (-1) * supplierTransaction.balance,
        }
        const safe_history = {
          by_user: user._id,
          by_user_name: user.name,
          history_type: 'fee',
          history_id: consumption_id,
          value: (-1) * supplierTransaction.balance,
        }
        await instance.Safe.updateValue(safe_data, safe_history);
        /** */

      }
      reply.ok({ id: id })
    } catch (error) {
      return reply.error(error.message)
    }
  }

  const createTransactionSchema = {
    version: '1.0.0',
    schema: {
      body: {
        type: 'object',
        additionalProperties: false,
        required: [
          'supplier_id', 'document_id',
          'currency', 'status', 'balance'
        ],
        properties: {
          supplier_id: { type: 'string' },
          document_id: { type: 'string' },
          currency: {
            type: 'string',
            default: 'uzs'
          },
          status: {
            type: 'string',
            enum: ['active', 'pending']
          },
          balance_type: {
            type: 'string',
            enum: ['cash', 'card']
          },
          balance: { type: 'number' },
          return_money: {
            type: 'boolean',
            default: false
          }
        }
      }
    },
    attachValidation: true
  }

  instance.post(
    '/inventory/supplier/transaction/create',
    createTransactionSchema,
    (request, reply) => {
      if (request.validationError) {
        return reply.validation(request.validationError.message)
      }
      instance.oauth_admin(request, reply, (admin) => {
        request.user = admin
        return createTransactionHandler(request, reply)
      })
    }
  )

  // update transaction

  const updateTransactionHandler = async (request, reply) => {
    const id = request.params.id
    const body = request.body
    const user = request.user
    try {
      const transaction = await instance.supplierTransaction.findOne({ _id: id })
      if (!transaction) {
        return reply.fourorfour('Transaction')
      }
      await instance.supplierTransaction.updateOne({
        _id: transaction._id
      }, {
        $set: body
      })
      reply.ok({ _id: id })
      if (transaction.status == 'pending' && body.status == 'active') {
        if (transaction.currency == 'usd') {
          try {
            let currency = await instance.Currency.findOne({ organization: user.organization })
            if (!currency) {
              currency = { value: 1 }
            }
            body.balance = transaction.balance * currency.value
          } catch (error) { }
        }
        const supplier = await instance.adjustmentSupplier.findOne({ _id: transaction.supplier_id })
        const supplier_name = supplier ? supplier.supplier_name : ''
        const { _id: consumption_id } = await new instance.consumptionModel({
          organization: user.organization,
          transaction_id: transaction._id,
          date: transaction.date,
          supplier: transaction.supplier_id,
          organization: user.organization,
          by: user._id,
          type: 'company_to_fees',
          supplier_name: supplier_name,
          amount_type: transaction.balance_type,
          amount: body.balance,
          currency_amount: transaction.balance,
          currency: transaction.currency,
          by: user._id,
          by_name: user.name
        }).save()

        /** Remove from Safe */
        const safe_data = {
          organization: user.organization,
          type: transaction.currency,
          value: (-1) * transaction.balance
        }
        const safe_history = {
          by_user: user._id,
          by_user_name: user.name,
          history_type: 'fee',
          history_id: consumption_id,
          value: (-1) * transaction.balance
        }
        await instance.Safe.updateValue(safe_data, safe_history);
        /** */

      }
    } catch (error) {
      return reply.fourorfour('Transaction')
    }
  }

  const updateTransactionSchema = {
    version: '1.0.0',
    schema: {
      params: {
        type: 'object',
        required: ['id'],
        properties: {
          id: { type: 'string' }
        }
      },
      body: {
        type: 'object',
        additionalProperties: false,
        required: ['status'],
        properties: {
          status: {
            type: 'string',
            enum: ['active', 'pending']
          }
        }
      }
    },
    attachValidation: true
  }

  instance.post(
    '/inventory/supplier/transaction/update/:id',
    updateTransactionSchema,
    (request, reply) => {
      if (request.validationError) {
        return reply.validation(request.validationError.message)
      }
      instance.oauth_admin(request, reply, (admin) => {
        request.user = admin
        return updateTransactionHandler(request, reply)
      })
    }
  )

  next()
}
